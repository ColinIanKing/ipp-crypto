.. _eccpsharedsecretdh:

ECCPSharedSecretDH
==================


Computes a shared secret field element by using the Diffie-Hellman
scheme.


Syntax
------


IppStatus ippsECCPSharedSecretDH(const IppsBigNumState\* pPrivateA,
const IppsECCPPointState\* pPublicB, IppsBigNumState\* pShare,
IppsECCPState\* pECC);


Include Files
-------------


``ippcp.h``


Parameters
----------


.. list-table:: 
   :header-rows: 0

   * - pPrivateA   
     - Pointer to your own private key ``privKey``.
   * - pPublicB   
     - Pointer to the public key ``pubKey``.
   * - pShare   
     - Pointer to the secret number\ ``bnShare``.
   * - pECC   
     - Pointer to the context of the elliptic cryptosystem.




Description
-----------


The function computes a secret number bnShare, which is a secret key
shared between two participants of the cryptosystem.


In cryptography, metasyntactic names such as Alice as Bob are normally
used as examples and in discussions and stand for participant A and
participant B.


Both participants (Alice and Bob) use the cryptosystem for receiving a
common secret point on the elliptic curve called a secret key. To
receive a secret key, participants apply the Diffie-Hellman
key-agreement scheme involving public key exchange. The value of the
secret key entirely depends on participants.


According to the scheme, Alice and Bob perform the following operations:


#. Alice calculates her own public key ``pubKeyA`` by using her private
   key ``privKeyA``: ``pubKeyA = privKeyA``\ · ``G``, where ``G`` is the
   base point of the elliptic curve. Alice passes the public key to Bob.
#. Bob calculates his own public key ``pubKeyB`` by using his private
   key ``privKeyB``: ``pubKeyB = privKeyB``\ · ``G``, where ``G`` is a
   base point of the elliptic curve. Bob passes the public key to Alice.
#. Alice gets Bob's public key and calculates the secret point
   ``shareA``. When calculating, she uses her own private key and Bob's
   public key and applies the following formula:
   ``shareA = privKeyA``\ · ``pubKeyB =``\ ``privKeyA``\ ·
   ``privKeyB``\ · ``G``.
#. Bob gets Alice's public key and calculates the secret point
   ``shareB``. When calculating, he uses his own private key and Alice's
   public key and applies the following formula:
   ``shareB = privKeyB``\ · ``pubKeyA =``\ ``privKeyB``\ ·
   ``privKeyA``\ · ``G``.


Because the following equation is true ``privKeyA``\ · ``privKeyB``\ ·
``G =``\ ``privKeyB``\ · ``privKeyA``\ · ``G``, the result of both
calculations is the same, that is, the equation
``shareA =``\ ``shareB``\ is true. The secret point serves as a secret
key.


Shared secret bnShare is an x-coordinate of the secret point on the
elliptic curve.


The elliptic curve domain parameters must be hitherto defined by one of
the functions:
`ECCPSet <eccpset.html>`__
or
`ECCPSetStd <eccpsetstd.html>`__.


Return Values
-------------


.. list-table:: 
   :header-rows: 0

   * - ippStsNoErr    
     - Indicates no error. Any other value indicates an error or warning.
   * - ippStsNullPtrErr   
     - Indicates an error condition if any of the specified pointers is NULL.
   * - ippStsContextMatchErr   
     - Indicates an error condition if one of the contexts pointed by pPublicB, pShare, or pECC is not valid.
   * - ippStsRangeErr    
     - Indicates an error condition if the memory size of bnShare pointed by pShare is less than the value of feBitSize in the function `ECCPInit <eccpinit.html>`__.
   * - ippStsShareKeyErr   
     - Indicates an error condition if the shared secret key is not valid. (For example, the shared secret key is invalid if the result of the secret point calculation is the point at infinity.)



