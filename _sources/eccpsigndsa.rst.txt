.. _eccpsigndsa:


ECCPSignDSA
===========


Computes a digital signature over a message digest.


Syntax
------


IppStatus ippsECCPSignDSA(const IppsBigNumState\* pMsgDigest, const
IppsBigNumState\* pPrivate, IppsBigNumState\* pSignX, IppsBigNumState\*
pSignY, IppsECCPState\* pECC);


Include Files
-------------


``ippcp.h``


Parameters
----------


.. list-table:: 
   :header-rows: 0

   * - pMsgDigest   
     - Pointer to the message digest *msg* to be digitally signed, that is, to be ecrypted with a private key.
   * - pPrivate   
     - Pointer to the signer's regular private key.
   * - pSignX   
     - Pointer to the integer *r* of the digital signature.
   * - pSignY   
     - Pointer to the integer *s* of the digital signature.
   * - pECC   
     - Pointer to the context of the elliptic cryptosystem.




Description
-----------


A message digest is a fixed size number derived from the original
message with an applied hash function over the binary code of the
message. The signer's private key and the message digest are used to
create a signature.


A digital signature over a message consists of a pair of large numbers
*r* and *s* which the given function computes.


The scheme used for computing a digital signature is the ECDSA scheme,
an elliptic curve analogue of the DSA scheme. ECDSA assumes that the
following keys are hitherto set by a message signer:


.. list-table:: 
   :header-rows: 0

   * - \ *regPrivKey*\    
     - Regular private key.
   * - \ *ephPrivKey*\    
     -  Ephemeral private key.
   * - \ *ephPubKey*\    
     - Ephemeral public key.




For security reasons, each signature must be generated with the unique
ephemeral private key. Because of this, the function clears (sets to
zero) the input ephemeral key before return. To generate and set up the
keys before sign generation, call the
`ECCPGenKeyPair <eccpgenkeypair.html>`__
and
`ECCPSetKeyPair <eccpsetkeypair.html>`__
functions.


The elliptic curve domain parameters must be hitherto defined by one of
the functions:
`ECCPSet <eccpset.html>`__
or
`ECCPSetStd <eccpsetstd.html>`__.


For more information on digital signatures, please refer to the
[`ANSI <bibliography.html>`__]
standard.


Return Values
-------------


.. list-table:: 
   :header-rows: 0

   * - ippStsNoErr    
     - Indicates no error. Any other value indicates an error or warning.
   * - ippStsNullPtrErr   
     - Indicates an error condition if any of the specified pointers is NULL.
   * - ippStsContextMatchErr   
     - Indicates an error condition if one of the contexts pointed by pMsgDigest, pSignX, pSignY, or ECC is not valid.
   * - ippStsMessageErr   
     - Indicates an error condition if the value of *msg* pointed by pMsgDigest is negative, or the bit length is greater than the bit length of *n*, where *n* is the order of the elliptic curve base point *G*.
   * - ippStsRangeErr    
     - Indicates an error condition if one of the parameters pointed by pSignX or pSignY has a memory size smaller than the order *n* of the elliptic curve base point *G*.
   * - ippStsEphemeralKeyErr   
     - Indicates an error condition if the values of the ephemeral keys *ephPrivKey* and *ephPubKey* are not valid. (Either *r =* 0 or *s =* 0 is received as a result of the digital signature calculation).
   * - ippStsInvalidPrivateKey   
     - Indicates an error condition if the private key value does not belong to the [0, n-1] range, where *n* is the order of the elliptic curve base point *G*.


.. rubric:: Related Information

:ref:`signing-verification-using-the-elliptic-curve-cryptography-functions-over-a-prime-finite-field`

