.. _rsaverify_pkcs1v15:


RSAVerify_PKCS1v15
==================


Carries out the RSA-SSAsignature verification scheme of PKCS#1 v1.5.


Syntax
------


IppStatus ippsRSAVerify_PKCS1v15(const Ipp8u\* pMsg, int msgLen, const
Ipp8u\* pSign, int\* pIsSignValid, const IppsRSAPublicKeyState\* pKey,
IppHashAlgId hashAlg, Ipp8u\* pBuffer);


IppStatus ippsRSAVerify_PKCS1v15_rmf(const Ipp8u\* pMsg, int msgLen,
const Ipp8u\* pSign, int\* pIsSignValid, const IppsRSAPublicKeyState\*
pKey, const IppsHashMethod\* pMethod, Ipp8u\* pBuffer);


Include Files
-------------


``ippcp.h``


Parameters
----------


.. list-table:: 
   :header-rows: 0

   * -     pMsg   
     -  Pointer to the message that has been signed.
   * -     msgLen   
     -  Length of the message \*pMsg in octets.
   * -     pSign   
     -  Pointer to the signature string to be verified.
   * -     pIsSignValid   
     -  Pointer to the verification result.
   * -     pKey   
     -  Pointer to the properly initialized IppsRSAPublicKeyState context.
   * -     hashAlg   
     -  Identifier of the hash algorithm. For details, see table `Supported Hash Algorithms <one-way-hash-primitives.html>`__.
   * -     pMethod   
     -  Pointer to the hash method. For details, see `HashMethod <hashmethod.html>`__ functions.
   * -     pBuffer   
     -  Pointer to a temporary buffer of size not less than returned by the `RSA_GetBufferSizePublicKey <rsa_getbuffersizepublickey-rsa_getbuffersizeprivatekey.html>`__ function.




Description
-----------


The function verifies the signature generated by the
`RSASign_PKCS1v15 <rsasign_pkcs1v15.html>`__
function that uses the same hashAlg or pMethod parameter against the
input message, as defined [`PKCS
1.2.1 <bibliography.html>`__].


.. note::


   This function has a *reduced memory footprint* version. To learn
   more, see `Reduced Memory Footprint
   Functions <one-way-hash-primitives.html>`__.


Return Values
-------------


.. list-table:: 
   :header-rows: 0

   * -     ippStsNoErr   
     -  Indicates no error. Any other value indicates an error or warning.
   * -     ippStsNullPtrErr   
     -     Indicates an error condition if any of the specified pointers is NULL.   
   * -     ippStsContextMatchErr   
     -     Indicates an error condition if the context parameter does not match the operation.   
   * -     ippStsIncompleteContextErr   
     -     Indicates an error condition if the public key is not set up.   
   * -     ippStsLengthErr   
     -  Indicates an error condition if any input/output length parameters are inconsistent with one another.
   * -     ippsStsNotSupportedModeErr   
     -     Indicates an error condition if the hashAlg parameter does not match any value of IppHashAlgId listed in table `Supported Hash Algorithms <one-way-hash-primitives.html>`__.   


.. note:: You can set up the public key in a call to ``RSA_SetPublicKey``.


.. rubric:: Related Information

:ref:`rsa_setpublickey-rsa_setprivatekeytype1-rsa_setprivatekeytype2`

